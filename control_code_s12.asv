clear; clc; close all

global A B Nx Nu pert MI L m  nx ny tx ty g ra  

%n = 4; % dimensions of system
m1 = 50.172;  
m2=7.4;  m3 = 3.411; m4 = 1.073;
m5 = 7.4;  m6 = 3.411; m7 = 1.073;
%L1= 2*0.3382;
L1= 0.51264;
L2= 0.4418;  L3= 0.4033;  L4=0.06942;
L5= 0.4418;  L6= 0.4033;  L7=0.06942;

%MI1 = 2.21304881;
MI1 =  1.95;
MI2 =0.1038; MI3 = 0.05916;  MI4 = 0.01;
MI5 = 0.1038; MI6 = 0.05916; MI7 = 0.01;
%r1 = 0.126486;
%{
r1 = 0.19172736;
r2 = 0.33527; r3 = 0.1896;% r4 = 0.0595; 
r4 = 0.0195;
r5 = 0.33527; r6 = 0.1896;%r7 = 0.0595; 
r7 = 0.0195;

%}
r1 =L1/2;
r2 = 0.1872; r3 =0.1738;  r4 = 0.044;
r5 = 0.1872; r6 = 0.1738; r7 = 0.044;



MI = [MI1;MI2;MI3;MI4;MI5;MI6;MI7 ];
L = [L1;L2;L3;L4;L5;L6;L7];
m = [m1;m2;m3;m4;m5;m6;m7];
ra = [r1;r2;r3;r4;r5;r6;r7];
g = 9.81; % gravity
Nx = 18;
Nu  = 6;
Tf = 1;
dt = 0.1;
Nt = round(Tf/dt)+1;
A = zeros(Nx,Nx);
B = zeros(Nx,Nu);
pert = 0.0001;
nx = 0;tx = 1;
ny = 1;ty = 0;


dynamics_midpoint = @(x,u,dt) x + fun_xdot(x + fun_xdot(x,u,dt)*dt/2,u,dt)*dt;


coord = readmatrix("JointCoords3D_edit.xlsx");
time = coord(:,1);
%gtc = 24:159; % gait cycle time is from 0.23 to 1.58 seconds
gtc = 58:79; 
tfit = time(gtc);
dt = 0.01; % dt should be set to 0.01 only
tt = 0.54:dt:0.75;
%
lcop_x = 2-0.001*coord(:,38);
lcop_y = 0.001*coord(:,39)+0.02;
rcop_x = 2-0.001*coord(:,35);
rcop_y = 0.001*coord(:,36)+0.02;
lpost_x = 2-0.001*coord(:,14);
lmeta_x = 2-0.001*coord(:,17);
%{
dcopx = diff(rcop_x(77:159));
lcop_x(145) = lpost_x(145);
lcop_x(91) = lmeta_x(91);
for ii = 146:159
    lcop_x(ii) = lcop_x(ii-1) + dcopx(-145 + ii);
end
for ii = 90:-1:77
    lcop_x(ii) = lcop_x(ii+1) - dcopx(end + ii - 90);
end
%}
xtrunk = 2-0.001*coord(gtc,2);
ytrunk = 0.001*coord(gtc,3);
%%% left side
lxhip = 2-0.001*coord(gtc,5);
lyhip = 0.001*coord(gtc,6);
lxknee = 2-0.001*coord(gtc,8);
lyknee = 0.001*coord(gtc,9);
lxankle = 2-0.001*coord(gtc,11);
lyankle = 0.001*coord(gtc,12);
lxpost = 2-0.001*coord(gtc,14);
lypost = 0.001*coord(gtc,15);
lxmeta = 2-0.001*coord(gtc,17);
lymeta = 0.001*coord(gtc,18);
lxcop = lcop_x(gtc);
lycop = lcop_y(gtc);
%%% right side
rxhip = 2-0.001*coord(gtc,20);
ryhip = 0.001*coord(gtc,21);
rxknee = 2-0.001*coord(gtc,23);
ryknee = 0.001*coord(gtc,24);
rxankle = 2-0.001*coord(gtc,26);
ryankle = 0.001*coord(gtc,27);
rxpost = 2-0.001*coord(gtc,29);
rypost = 0.001*coord(gtc,30);
rxmeta = 2-0.001*coord(gtc,32);
rymeta = 0.001*coord(gtc,33);
rxcop = rcop_x(gtc);
rycop = rcop_y(gtc);
%%% mid-point of pelvis
x_p = (lxhip+rxhip)/2;
y_p = (lyhip+ryhip)/2;
rxfoot = 1/3*(rxankle + rxpost + rxmeta);
ryfoot = 1/3*(ryankle + rypost + rymeta);
lxfoot = 1/3*(lxankle + lxpost + lxmeta);
lyfoot = 1/3*(lyankle + lypost + lymeta);
a6 = mean(sqrt((rxankle-rxfoot).^2 + (ryankle-ryfoot).^2));
b6 = mean(sqrt((rxpost-rxfoot).^2 + (rypost-ryfoot).^2));
c6 = mean(sqrt((rxmeta-rxfoot).^2 + (rymeta-ryfoot).^2));
d6 = mean(sqrt((rxpost-rxankle).^2 + (rypost-ryankle).^2));
e6 = mean(sqrt((rxpost-rxmeta).^2 + (rypost-rymeta).^2));
gamma61 = acos((a6^2+b6^2-d6^2)/(2*a6*b6));
gamma62 = gamma61 + acos((b6^2+c6^2-e6^2)/(2*b6*c6));
a7 = mean(sqrt((lxankle-lxfoot).^2 + (lyankle-lyfoot).^2));
b7 = mean(sqrt((lxpost-lxfoot).^2 + (lypost-lyfoot).^2));
c7 = mean(sqrt((lxmeta-lxfoot).^2 + (lymeta-lyfoot).^2));
d7 = mean(sqrt((lxpost-lxankle).^2 + (lypost-lyankle).^2));
e7 = mean(sqrt((lxpost-lxmeta).^2 + (lypost-lymeta).^2));
gamma71 = acos((a7^2+b7^2-d7^2)/(2*a7*b7));
gamma72 = gamma71 + acos((b7^2+c7^2-e7^2)/(2*b7*c7));
%%% Sequence: SS2 -> DS1 -> SS1 -> DS2
r6SS2 = a6;
r7SS2 = a7;
r7b = b7;
r7f = c7;
varsSS2 = [r6SS2,r7SS2,r7b,r7f];
tht6SS2 = pi + atan2(ryankle(1:53)-ryfoot(1:53),rxankle(1:53)-rxfoot(1:53));
tht7SS2 = pi + atan2(lyankle(1:53)-lyfoot(1:53),lxankle(1:53)-lxfoot(1:53));
%
r6SS1 = a6;
r7SS1 = a7;
r6b = b6;
r6f = c6;
varsSS1 = [r6SS1,r7SS1,r6b,r6f];
tht6SS1 = pi + atan2(ryankle(69:121)-ryfoot(69:121),rxankle(69:121)-rxfoot(69:121));
tht7SS1 = pi + atan2(lyankle(69:121)-lyfoot(69:121),lxankle(69:121)-lxfoot(69:121));
%
L6DS1 = mean(sqrt((rxcop(54:68)-rxankle(54:68)).^2 + (rycop(54:68)-ryankle(54:68)).^2));
L7DS1 = mean(sqrt((lxcop(54:68)-lxankle(54:68)).^2 + (lycop(54:68)-lyankle(54:68)).^2));
r6DS1 = L6DS1/2;
r7DS1 = L7DS1/2;
varsDS1 = [L6DS1,L7DS1,r6DS1,r7DS1];
tht6DS1 = pi + atan2(ryankle(54:68)-rycop(54:68),rxankle(54:68)-rxcop(54:68));
tht7DS1 = pi + atan2(lyankle(54:68)-lycop(54:68),lxankle(54:68)-lxcop(54:68));
%
L6DS2 = mean(sqrt((rxcop(122:136)-rxankle(122:136)).^2 + (rycop(122:136)-ryankle(122:136)).^2));
L7DS2 = mean(sqrt((lxcop(122:136)-lxankle(122:136)).^2 + (lycop(122:136)-lyankle(122:136)).^2));
r6DS2 = L6DS2/2;
r7DS2 = L7DS2/2;
varsDS2 = [L6DS2,L7DS2,r6DS2,r7DS2];
tht6DS2 = pi + atan2(ryankle(122:136)-rycop(122:136),rxankle(122:136)-rxcop(122:136));
tht7DS2 = pi + atan2(lyankle(122:136)-lycop(122:136),lxankle(122:136)-lxcop(122:136));
%
R2 = mean(sqrt((rxhip-xtrunk).^2 + (ryhip-ytrunk).^2));
R3 = mean(sqrt((lxhip-xtrunk).^2 + (lyhip-ytrunk).^2));
%%% angles for inverse dynamics code
x1 = xtrunk;
y1 = ytrunk;
tht1 =  atan2(ytrunk-y_p,xtrunk-x_p);
tht2 =  atan2(ryhip-ryknee,rxhip-rxknee);
tht3 =  atan2(lyhip-lyknee,lxhip-lxknee);
tht4 =  atan2(ryknee-ryankle,rxknee-rxankle);
tht5 =  atan2(lyknee-lyankle,lxknee-lxankle);
tht6 = [tht6SS2 ; tht6DS1 ; tht6SS1 ; tht6DS2];
tht7 = [tht7SS2 ; tht7DS1 ; tht7SS1 ; tht7DS2];
%%% fitting fourier series for theta
f1 = fit(tfit,tht1,'fourier8');
tht1 = f1(tt);
f2 = fit(tfit,tht2,'fourier8');
tht2 = f2(tt);
f3 = fit(tfit,tht3,'fourier8');
tht3 = f3(tt);
f4 = fit(tfit,tht4,'fourier8');
tht4 = f4(tt);
f5 = fit(tfit,tht5,'fourier8');
tht5 = f5(tt);
f6 = fit(tfit,tht6,'fourier8');
tht6 = f6(tt);
f7 = fit(tfit,tht7,'fourier8');
tht7 = f7(tt);
fx1 = fit(tfit,x1,'fourier8');
x1 = fx1(tt);
fy1 = fit(tfit,y1,'fourier8');
y1 = fy1(tt);
%%% misc
del2 = mean(tht1 - atan2(y1-ryhip,x1-rxhip) - pi);
del3 = mean(pi - tht1 + atan2(y1-lyhip,x1-lxhip));
misc = [R2 R3 del2 del3 gamma61 gamma62 gamma71 gamma72];
%%% accelerations
[vx1,ax1] = differentiate(fx1,tt);
[vy1,ay1] = differentiate(fy1,tt);
[omg1,alp1] = differentiate(f1,tt);
[omg2,alp2] = differentiate(f2,tt);
[omg3,alp3] = differentiate(f3,tt);
[omg4,alp4] = differentiate(f4,tt);
[omg5,alp5] = differentiate(f5,tt);
[omg6,alp6] = differentiate(f6,tt);
[omg7,alp7] = differentiate(f7,tt);
%%% forces
c = 1;
for k = 1:length(tt)
    q = [x1(k) y1(k) tht1(k) tht2(k) tht3(k) tht4(k) tht5(k) tht6(k) tht7(k)];
    qdot = [vx1(k) vy1(k) omg1(k) omg2(k) omg3(k) omg4(k) omg5(k) omg6(k) omg7(k)];
    qddot = [ax1(k) ay1(k) alp1(k) alp2(k) alp3(k) alp4(k) alp5(k) alp6(k) alp7(k)];
    if (k>=1 && k<=53)
        sol(c,:) = single_stance_l_lag(q,qdot,qddot,varsSS2);
    elseif (k>=54 && k<=68)
        sol(c,:) = double_stance_lag(q,qdot,qddot,varsDS1);
    elseif (k>=69 && k<=121)
        sol(c,:) = single_stance_r_lag(q,qdot,qddot,varsSS1);
    elseif (k>=122 && k<=136)
        sol(c,:) = double_stance_lag(q,qdot,qddot,varsDS2);
    end
    c = c+1;
end

































































% initial conditions
BV   =   readmatrix("BV.xlsx");
vel  =   readmatrix("vel.xlsx");
tht1=BV(1,5);tht2=BV(2,5);tht3=BV(3,5);tht4=BV(4,5);tht5=BV(5,5);tht6=BV(6,5);tht7=BV(7,5);hx=BV(8,5);hy=BV(9,5);
omg1 = 0.1;omg2 = 0;omg3 = 0.2;omg4 = 0.0;omg5 = 0.5;omg6 = 0.5;omg7 = 0.5;vhx =-0.8;vhy = 0.2;

%omg1 = vel(1,5);omg2 = vel(2,5); omg3 =  vel(3,5); omg4 = vel(4,5);  omg5 =  vel(5,5);
%omg6 =   vel(6,5);  omg7 =   vel(7,5); vhx=  vel(8,5); vhy =  vel(9,5);
 x0 = [tht1;tht2;tht3;tht4;tht5;tht6;tht7;hx;hy;omg1;omg2;omg3;omg4;omg5;omg6;omg7;vhx;vhy];

% goal
thtf1=BV(1,6);thtf2=BV(2,6);thtf3=BV(3,6);thtf4=BV(4,6);thtf5=BV(5,6);thtf6=BV(6,6);thtf7=BV(7,6);hfx=BV(8,6);hfy=BV(9,6);
%omgf1 = vel(1,6);omgf2 = vel(2,6); omgf3 =  vel(3,6); omgf4 =  vel(4,6);  omgf5 =  vel(5,6);
%omgf6 =   vel(6,6);  omgf7 =  vel(7,6); vhfx=  vel(8,6); vhfy =  vel(9,6);

omgf1 = 0.8; omgf2 = 0.8; omgf3 = 0.4; omgf4 =  0.0;  omgf5 = 1;
omgf6 =   1.2;  omgf7 = 1.0; vhfx=  2; vhfy = 0.9; 
xf = [thtf1;thtf2;thtf3;thtf4;thtf5;thtf6;thtf7;hfx;hfy;omgf1;omgf2;omgf3;omgf4;omgf5;omgf6;omgf7;vhfx;vhfy];

% costs
%Q = 1e-5*eye(4);
Q =  1e-5*eye(Nx);
Qf = 25*eye(Nx);
R = 5*1e-7*eye(Nu);
I = eye(Nu);

e_dJ = 1e-12;

%simulation
%dt = 0.1;
%tf = 1;
%N = floor(tf/dt);
%t = linspace(0,tf,N);
%iterations = 100;

% initialization
%u = rand(Nu,Nt-1)*100;
u = zeros(Nu,Nt-1);
x = zeros(Nx,Nt);
x_prev = zeros(Nx,Nt);
x(:,1) = x0;

A = fun_amat(x(:,1),u,dt);
B = fun_bmat(x(:,1),u,dt);



% first roll-out
for k = 2:Nt-1
        x(:,k) = dynamics_midpoint(x(:,k-1),u(:,k-1),dt);
        %x(:,k-1)
        %fc(x(:,k-1) + fc(x(:,k-1),u(:,k-1))*dt/2,u(:,k-1))
        % fc() 
end

% original cost
J = 0;
for k = 1:Nt-1
    J = J + (x(:,k)-xf)'*Q*( x(:,k)-xf) + u(:,k)'*R*u(:,k);
end 
disp('Original cost:')
J = 0.5*(J + (x(:,Nt)-xf)'*Qf*(x(:,Nt)-xf))

%{
%%%%%%%%%%%%%%%% ILQR Algorithm  %%%%%%%%%%%%%%%%%%%%
p = ones(Nx,Nt);
P = zeros(Nx,Nx,Nt);
%d = ones(Nu,Nu,Nt-1);
d = ones(Nu,Nt-1);
K = zeros(Nu,Nx,Nt-1);
%pdim = ones(Nx,Nu,Nt);
dJ = 0.0;  % change in cost

xn = zeros(Nx,Nt);
un = zeros(Nu,Nt-1);
% func g(dx,du) is perturbation of val func
% grad- g/ hessian-G of change in value fun
gx = zeros(Nx);
gu = zeros(Nu);
Gxx = zeros(Nx,Nx);
Guu = zeros(Nu,Nu);
Gxu = zeros(Nx,Nu);
Gux = zeros(Nu,Nx);

iter = 0;
while max(abs(d(:))) >  1e-3
    
    iter = iter +  1 

 %%%%% Backward Pass %%%%%
    dJ = 0.0;
    p(:,Nt) = Qf*(x(:,Nt)-xf);     %%% P is vx
    P(:,:,Nt) = Qf;                %%% P is vxx
    mu_reg = 0;
    for k = (Nt-1):-1:1
   
          %Calculate derivatives of stage cost
           q = Q*( x(:,k)-xf);     % lx
           r = R*u(:,k);       % lu
            
            A = fun_amat(x(:,k),u(:,k),dt);
            B = fun_bmat(x(:,k),u(:,k),dt);

           %gradient of change in val fn
            gx = q + A'*p(:,k+1);% gx = dg/dx  
           gu = r + B'*p(:,k+1);% gu = dg/du
    
          %iLQR (Gauss-Newton) version
          %Hessian
             Gxx = Q + A'*(P(:,:,k+1))*A;
             Guu = R + B'*(P(:,:,k+1)+ mu_reg*eye(Nx))*B;
             Gxu = A'*P(:,:,k+1)*B;
             Gux = B'*(P(:,:,k+1) + mu_reg*eye(Nx))*A;     
             
             %beta = 0.1;
             log = issymmetric([Guu]);
             eigv = eig([Guu]);

          if any(eig(Guu)<0)
            mu_reg = mu_reg + 1;
            k = Nt-1;
            disp('regularized')
          end
          %% 
        %{
              while (log==0) || all(eigv < 0) 
                    Gxx = Gxx + A'*beta*I*A
                    Guu = Guu + B'*beta*I*B
                    Gxu = Gxu + A'*beta*I*B
                    Gux = Gux + B'*beta*I*A
                    beta = 2*beta
                    %display("regularizing G")
                    display(beta)
                    log = issymmetric([Gxx Gxu; Gux Guu]);
                    eigv = eig([Gxx Gxu; Gux Guu]);
              end
         %}
            d(:,k) = Guu\gu;  % feedforward term
            K(:,:,k) = Guu\Gux; % feedback gain term
    
             p(:,k) = gx - K(:,:,k)'*gu + K(:,:,k)'*Guu*d(:,k) - Gxu*d(:,k);
             P(:,:,k) = Gxx + K(:,:,k)'*Guu*K(:,:,k) - Gxu*K(:,:,k) - K(:,:,k)'*Gux;
             dJ = dJ +  gu'*d(:,k);
 %disp('ITERATIPONSSSSSSSSSSSSSSSSSSSSS')
     %  k
      %pause()
    end
    disp('ITERATIPONSSSSSSSSSSSSSSSSSSSSS- cOMPLETED')
       k
       pause()
    
  
%%%% End of Backward Pass %%%%%
      
    %Forward rollout with line search
    xn(:,1) = x(:,1);
    alpha = 1.0;
   for k = 1:(Nt-1)
        un(:,k) = u(:,k) - alpha*d(:,k) - (K(:,:,k)*(xn(:,k)-x(:,k)));
        xn(:,k+1) = dynamics_midpoint(xn(:,k),un(:,k),dt);
      %  disp('ITERATIPONSSSSSSSSSSSSSSSSSSSSS')
       %k
     %pause()
    end
    disp('EOFP')
     pause() 
    Jn = 0;
    for k = 1:Nt-1
        Jn = Jn + (xn(:,k)-xf)'*Q*(xn(:,k)-xf) + un(:,k)'*R*un(:,k);
    end
   Jn = 0.5*(Jn + (xn(:,Nt)-xf)'*Qf*(xn(:,Nt)-xf))
    
     disp('line search')
     pause() 
 
    while isnan(Jn) || Jn > (J - 1e-2*alpha*dJ)
        alpha = 0.5*alpha
        for k = 1:(Nt-1)
            un(:,k) = u(:,k) - alpha*d(:,k) - (K(:,:,k)*(xn(:,k)-x(:,k)));
            xn(:,k+1) = dynamics_midpoint(xn(:,k),un(:,k),dt);
            %xn(:,k+1) = dynamics_rk4(xn(:,k),un(k)
        end
        %Jn = cost(xn,un);
        Jn = 0;
        for k = 1:Nt-1
            Jn = Jn + (xn(:,k) - xf)'*Q*(xn(:,k) - xf) + un(:,k)'*R*un(:,k);
        end
     Jn = 0.5*(Jn + (xn(:,Nt) - xf)'*Qf*(xn(:,Nt) - xf))
     % pause()
    end
       pause() 
 
    J = Jn;
    x = xn;
    u = un;
   %if iter > 5
    %   break
    %end
  end

%}














